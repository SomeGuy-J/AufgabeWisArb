   ##i) Eine Funktion, die verschiedene geeignete deskriptive Statistiken für metrische Variablen berechnet und ausgibt:
      
   deskriptive_statistik_metrischer_variabeln <- function(titanic) {
   ## Fehlende Werte entfernen:
      titanic_clean <- titanic[!is.na(x)]
   ## Bestimmung der Anzahl der Beobachtungen:
      n <- length(titanic_clean)
   ## Berechnung des arithmetischen Mittels:
      aritmetisches_mittel <- sum(titanic_clean) / n
   ## Berechnung des Medians:
   ## Sortierung der Daten + Bestimmung des Mittelwertes der mittleren Werte (bei gerader Anzahl) oder des mittleren Wertes (bei ungerader Anzahl):
      titanic_sortiert <- sort(titanic_clean)
       if(n %% 2 == 1) { 
        median <- titanic_sortiert[(n + 1) / 2]
         } else {
        median <- (titanic_sortiert[n/2] + titanic_sortiert[n/2 + 1]) / 2
      }
  ## Bestimmen von Minimum und Maximum:
     min <- titanic_sortiert[1]
     max <- titanic_sortiert[n]
  ## Berechnung der Stichprobenvarianz: 
     varianz <- sum((titanic_clean - arithmetisches_mittel)^2) / (n - 1)
  ## Standardabweichung:
     standartabweichung <- sqrt(varianz)
  ## Berechnung der Quantile (25%, 50%, 75%):
     q1 <- quantile(titanic_clean, probs = 0.25, names = FALSE)
     q2 <- quantile(titanic_clean, probs = 0.50, names = FALSE)  
     q3 <- quantile(titanic_clean, probs = 0.75, names = FALSE)
     # q2 entspricht auch dem Median
  ## Berechnung des Interquartilsabstands (IQR):
     IQR <- q3 - q1
  ## Zusammenstellung der Ergebnisse in Form einer Liste:
     result <- list(
     N = n, Arithmetisches Mittel = aritmetisches_mittel, Median = median, Minimum = min, Maximum = max, Varianz = varianz, Standardabweichung = standartabweichung, Q1 = q1, Q2 = q2, Q3 = q3, IQR = IQR)
     return(result)
     }
 ## Es folgt eine Darstellung aller zu vor genannten Berechnungen.

##ii) Eine Funktion, die verschiedene geignete deskriptive Stastiken für kategoriale Variablen berechnet und ausgibt.
##Funktion zur Berechnung deskriptiver Statistiken für kategoriale Variablen

kategoriale_variablen <- function(data, var) {
  ##Überprüfen, ob die Variable ein Factor oder Character ist
  if (!is.factor(data[[var]]) && !is.character(data[[var]])) {
    stop("Die Variable muss ein Factor oder Character sein.")
  }
  
  ##Häufigkeiten der Kategorien berechnen
  freq_table <- table(data[[var]])
  
  ##Modus berechnen
  mode <- names(freq_table)[which.max(freq_table)]
  
  ##Relative Häufigkeiten berechnen
  prop_table <- round(prop.table(freq_table)*100,3)
  
  ##Ergebnisse in einer Liste zusammenfassen
  results <- list(
    Frequency = freq_table,
    Mode = mode,
    Proportion = prop_table
  )
  
  return(results)
}


## iv) Eine Funktion zur Analyse des Zusammenhangs bzw. der Korrelation zwischen einer metrischen und einer dichotomen Variablen
analyze_metric_dichotomous <- function(data, metric_var, dichotomous_var) {
    ## Überprüfung der Variablen, falls nicht vorhanden Fehlerausgabe, sonst Funktion anwenden
    
    if (!(metric_var %in% names(data)) | !(dichotomous_var %in% names(data))) {
        stop("Eine oder beide Variablen sind nicht im Datensatz vorhanden.")
    }
    
    ## Überprüfung der dichotomen Variable (ob sie nur 2 Merkmalsausprägungen hat)
    unique_vals <- unique(data[[dichotomous_var]])
    if (length(unique_vals) != 2) {
        stop("Die dichotome Variable muss genau zwei Kategorien haben.")
    }
    
    ## NA-Werten löschen
    data_clean <- na.omit(data[, c(metric_var, dichotomous_var)])
    
    ## Mittelwert und Standardabweichung
    summary_stats <- aggregate(
        data_clean[[metric_var]],
        by = list(Group = data_clean[[dichotomous_var]]),
        FUN = function(x) c(Mean = mean(x), SD = sd(x))
    )
    
    ## Lesbarkeit verbessern
    summary_stats <- do.call(data.frame, summary_stats)
    
    ## Spaltennamen hinzufügen
    colnames(summary_stats) <- c(dichotomous_var, "Mean", "SD")
    
    ## Ausgabe der deskriptiven Statistiken
    cat("Deskriptive Statistiken:\n")
    print(summary_stats)
    
    ## T-Test zum Vergleich der Mittelwerte der Gruppen
    t_test_result <- t.test(
        data_clean[[metric_var]] ~ data_clean[[dichotomous_var]]
    )
    
    ## Ausgabe der Ergebnisse des t-Tests
    cat("\nErgebnisse des t-Tests:\n")
    print(t_test_result)
}
